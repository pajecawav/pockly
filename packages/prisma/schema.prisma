datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator pothos {
  provider = "prisma-pothos-types"
  output   = "./generated/pothos.d.ts"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  bookmarks Bookmark[]
  tags      Tag[]

  @@map("users")
}

model Bookmark {
  id         String    @id @default(cuid())
  url        String
  title      String
  image      String?
  note       String?
  addedAt    DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  likedAt    DateTime?
  archivedAt DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  tags Tag[]

  @@unique([url, userId])
  @@map("bookmarks")
}

model Tag {
  id   String @id @default(cuid())
  name String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  bookmarks Bookmark[]

  @@unique([name, userId])
  @@map("tags")
}

model Thumbnail {
  id        String @id
  sourceUrl String
  url       String

  @@map("thumbnails")
}
